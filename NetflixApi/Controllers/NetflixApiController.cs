using Microsoft.AspNetCore.Mvc;
using NetflixApi.Data;
using NetflixApi.Models;
using Microsoft.EntityFrameworkCore;

namespace NetflixApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class NetflixApiController : ControllerBase
{
    private readonly MoviesContext _context;
    private readonly ILogger<NetflixApiController> _logger;

    // Constructor ensures that the fields are initialized and not null
    public NetflixApiController(MoviesContext context, ILogger<NetflixApiController> logger)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<NetflixMoviesDTO>>> GetMovies()
    {
        return await _context.NetflixMovies
            .Select(x => new NetflixMoviesDTO
            {
                id = x.id,
                title = x.title,
                description = x.description
            })
            .ToListAsync();
    }
    
    [HttpPost]
    public async Task<ActionResult<NetflixMoviesDTO>> PostNetflixMovies(NetflixMoviesDTO netflixMoviesDTO)
    {
        // Create the new movie entity, without setting the 'id' explicitly
        var netflixMovies = new NetflixMovies
        {
            title = netflixMoviesDTO.title,
            description = netflixMoviesDTO.description,
            id = netflixMoviesDTO.id
        };

        // Add the new entity to the context and save changes
        _context.NetflixMovies.Add(netflixMovies);
        await _context.SaveChangesAsync();  // At this point, the database will assign the 'id' automatically.

        // Return the DTO with the generated 'id'
        return CreatedAtAction(
            nameof(GetMovies),
            new { id = netflixMovies.id },  // The 'id' is now generated by the database.
            NetflixMoviesToDTO(netflixMovies));  // Use the newly created entity.
    }
    // </snippet_GetByID>

    // PUT: api/NetflixMovies/5
    // To protect from overposting attacks,
    // <snippet_Update>
    [HttpPut("{id}")]
    public async Task<IActionResult> PutNetflixMovies(long id, NetflixMoviesDTO netflixMoviesDTO)
    {
        if (id != netflixMoviesDTO.id)
        {
            return BadRequest();
        }

        var netflixMovies = await _context.NetflixMovies.FindAsync(id);
        if (netflixMovies == null)
        {
            return NotFound();
        }

        netflixMovies.title = netflixMovies.title;
        netflixMovies.description = netflixMovies.description;

        try
        {
            await _context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException) when (!NetflixMoviesExists(id))
        {
            return NotFound();
        }

        return NoContent();
    }


    // DELETE: api/NetflixMovies/5
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteNetflixMovies(long id)
    {
        var netflixMovies = await _context.NetflixMovies.FindAsync(id);
        if (netflixMovies == null)
        {
            return NotFound();
        }

        _context.NetflixMovies.Remove(netflixMovies);
        await _context.SaveChangesAsync();

        return NoContent();
    }


    private bool NetflixMoviesExists(long id)
    {
        return _context.NetflixMovies.Any(e => e.id == id);
    }

    private static NetflixMoviesDTO NetflixMoviesToDTO(NetflixMovies netflixMovies) =>
        new NetflixMoviesDTO
        {
            id = netflixMovies.id,
            title = netflixMovies.title,
            description = netflixMovies.description
        };
}
